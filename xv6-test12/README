####Part A
- change address from 0 to 4096 for user code in the user `makefile.mk`
- change `sz = 4096` in exec.c
- change the for loop initial value to 4096 in `fork()`

####Part B
- `shmeminit` runs once only in the OS not once for each processor
- define 4 shared pages `SHMEM_PAGES`
- init the count `count_shmem`
- allocate memory for the pages using kalloc in `shmeminit`
- add the two system calls. shmem_count and shmem_access - init them on the user and kernel side and in `defs.h`
- shmem_count  - in vm.c - returns the counter variable initialized in shmeminit
- in the per-process struct in `proc.h` add the number of child processes `shmem_child` and the number of shared pages in use 
`shmem`
- in shmem_access - 
    - if theres a shared page already mapped - return it
    - otherwise set up the mapping using mappages
    - increment counts, map and then return mapping
- in the freevm function - decrement the number of shmem_child for each of the shared pages post free-ing 
- in the `fork` function - replicate the shared pages for the new process created by fork
- adjust according to `USERTOP` in the functions from`syscall.c`


Notes

- think about clean up 
    - when a process exits, its AS is freed
    - go through PT and free all the physical pages associated with the process that has `exit()`
    - BUT we have a shared page, which shouldn't be deallocated
    - in the `wait` function we can see that it calls `freevm` for the process' `pgdir`
- sz marks end of the heap
- the shared pages go at the end of the AS 
- heap growing towards the shared pages might run into them 
- fork creates a copy of the AS. but now the AS has shared pages, we don't want to copy those
- exec overwrites the AS - can overwrite the shared pages

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2007/v6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (bootother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people made contributions:
    Russ Cox (context switching, locking)
    Cliff Frey (MP)
    Xiao Yu (MP)
    Nickolai Zeldovich
    Austin Clements

In addition, we are grateful for the patches contributed by Greg
Price, Yandong Mao, and Hitoshi Mitake.

The code in the files that constitute xv6 is
Copyright 2006-2007 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

If you spot errors or have suggestions for improvement, please send
email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
On non-x86 or non-ELF machines (like OS X, even on x86), you will
need to install a cross-compiler gcc suite capable of producing x86 ELF
binaries.  See http://pdos.csail.mit.edu/6.828/2007/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-".

To run xv6, you can use Bochs or QEMU, both PC simulators.
Bochs makes debugging easier, but QEMU is much faster. 
To run in Bochs, run "make bochs" and then type "c" at the bochs prompt.
To run in QEMU, run "make qemu".

